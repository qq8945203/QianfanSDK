<?php
/**
 * QianfanApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Baiducloud\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 千帆SDK
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: unset
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Baiducloud\SDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Uri;
use GuzzleHttp\RequestOptions;
use Baiducloud\SDK\ApiException;
use Baiducloud\SDK\Configuration;
use Baiducloud\SDK\HeaderSelector;
use Baiducloud\SDK\ObjectSerializer;

/**
 * QianfanApi Class Doc Comment
 *
 * @category Class
 * @package  Baiducloud\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class QianfanApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'chat' => [
            'application/json',
        ],
        'completion' => [
            'application/json',
        ],
        'embedding' => [
            'application/json',
        ],
        'plugin' => [
            'application/json',
        ],
        'text2image' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        Configuration $config,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config;
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    protected function updateParamsForAuth($authNames, &$queryParams, &$headerParams, $payload, $method, $uri) {
        if (!is_array($this->config->getAuthentications())) {
            throw new ApiException('Authentications have not been set.');
        }

        foreach ($this->config->getAuthentications() as $auth) {
            if (in_array(strtolower($auth->getAuthName()), array_map('strtolower', $authNames))) {
                $auth->applyToParams($this->client, $queryParams, $headerParams, $payload, $method, $uri);
                break;
            }
        }
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation chat
     *
     * 调用对话类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chat'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function chat($llm, $body)
    {
        list($response) = $this->chatWithHttpInfo($llm, $body);
        return $response;
    }

    /**
     * Operation chatWithHttpInfo
     *
     * 调用对话类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chat'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatWithHttpInfo($llm, $body, string $contentType = self::contentTypes['chat'][0])
    {
        $request = $this->chatRequest($llm, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatAsync
     *
     * 调用对话类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatAsync($llm, $body, string $contentType = self::contentTypes['chat'][0])
    {
        return $this->chatAsyncWithHttpInfo($llm, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatAsyncWithHttpInfo
     *
     * 调用对话类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatAsyncWithHttpInfo($llm, $body, string $contentType = self::contentTypes['chat'][0])
    {
        $returnType = 'object';
        $request = $this->chatRequest($llm, $body, $contentType);
        $stream = false;
        if (isset($body->stream)) {
            $stream = $body->stream;
        }
        return $this->client
            ->sendAsync($request, ['stream' => $stream] + $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $sseHeader = "text/event-stream";
                    if (substr($response->getHeaderLine("content-type"), 0, strlen($sseHeader)) === $sseHeader) {
                        $body = $response->getBody();
                        // 检查流是否可读
                        if ($body->isReadable()) {
                            return [(function () use ($body) {
                                $buffer = "";
                                $msgBuffer = "";
                                // 循环直到EOF
                                while (!$body->eof()) {
                                    // 读取一行
                                    $data = $body->read(12);
                                    $buffer = $buffer . $data;
                                    $lines = explode("\n", $buffer);
                                    $buffer = array_pop($lines);
                                    foreach ($lines as $line) {
                                        if ($line == "") {
                                            yield json_decode($msgBuffer);
                                            $msgBuffer = "";
                                            continue;
                                        }
                                        $msgPart = explode(":", $line, 2);
                                        $type = $msgPart[0];
                                        $content = $msgPart[1];
                                        if ($type == 'data') {
                                            $msgBuffer = $msgBuffer.$content;
                                        }
                                    }
                                }
                            })(), $response->getStatusCode(), $response->getHeaders()];
                        }
                        return [
                            null,
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    } else {
                        if ($returnType === '\SplFileObject') {
                            $content = $response->getBody(); //stream goes to serializer
                        } else {
                            $content = (string) $response->getBody();
                            if ($returnType !== 'string') {
                                $content = json_decode($content);
                            }
                        }

                        return [
                            ObjectSerializer::deserialize($content, $returnType, []),
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    }
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chat'
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chat'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatRequest($llm, $body, string $contentType = self::contentTypes['chat'][0])
    {

        // verify the required parameter 'llm' is set
        if ($llm === null || (is_array($llm) && count($llm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $llm when calling chat'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling chat'
            );
        }


        $resourcePath = '/rpc/2.0/ai_custom/v1/wenxinworkshop/chat/{llm}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $queryParams['source'] = 'baiducloud-sdk';
        $queryParams['appName'] = 'php';
        $queryParams['sourceVer'] = '1.0.0';


        // path params
        if ($llm !== null) {
            $resourcePath = str_replace(
                '{' . 'llm' . '}',
                ObjectSerializer::toPathValue($llm),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $localVarAuthNames = array ( "IamAuth", "OAuth" );
        $this->updateParamsForAuth($localVarAuthNames,$queryParams, $headers, $httpBody, 'POST', new Uri($operationHost . $resourcePath));

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation completion
     *
     * 调用续写类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completion'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function completion($llm, $body)
    {
        list($response) = $this->completionWithHttpInfo($llm, $body);
        return $response;
    }

    /**
     * Operation completionWithHttpInfo
     *
     * 调用续写类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completion'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function completionWithHttpInfo($llm, $body, string $contentType = self::contentTypes['completion'][0])
    {
        $request = $this->completionRequest($llm, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation completionAsync
     *
     * 调用续写类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completionAsync($llm, $body, string $contentType = self::contentTypes['completion'][0])
    {
        return $this->completionAsyncWithHttpInfo($llm, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completionAsyncWithHttpInfo
     *
     * 调用续写类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completionAsyncWithHttpInfo($llm, $body, string $contentType = self::contentTypes['completion'][0])
    {
        $returnType = 'object';
        $request = $this->completionRequest($llm, $body, $contentType);
        $stream = false;
        if (isset($body->stream)) {
            $stream = $body->stream;
        }
        return $this->client
            ->sendAsync($request, ['stream' => $stream] + $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $sseHeader = "text/event-stream";
                    if (substr($response->getHeaderLine("content-type"), 0, strlen($sseHeader)) === $sseHeader) {
                        $body = $response->getBody();
                        // 检查流是否可读
                        if ($body->isReadable()) {
                            return [(function () use ($body) {
                                $buffer = "";
                                $msgBuffer = "";
                                // 循环直到EOF
                                while (!$body->eof()) {
                                    // 读取一行
                                    $data = $body->read(12);
                                    $buffer = $buffer . $data;
                                    $lines = explode("\n", $buffer);
                                    $buffer = array_pop($lines);
                                    foreach ($lines as $line) {
                                        if ($line == "") {
                                            yield json_decode($msgBuffer);
                                            $msgBuffer = "";
                                            continue;
                                        }
                                        $msgPart = explode(":", $line, 2);
                                        $type = $msgPart[0];
                                        $content = $msgPart[1];
                                        if ($type == 'data') {
                                            $msgBuffer = $msgBuffer.$content;
                                        }
                                    }
                                }
                            })(), $response->getStatusCode(), $response->getHeaders()];
                        }
                        return [
                            null,
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    } else {
                        if ($returnType === '\SplFileObject') {
                            $content = $response->getBody(); //stream goes to serializer
                        } else {
                            $content = (string) $response->getBody();
                            if ($returnType !== 'string') {
                                $content = json_decode($content);
                            }
                        }

                        return [
                            ObjectSerializer::deserialize($content, $returnType, []),
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    }
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completion'
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['completion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function completionRequest($llm, $body, string $contentType = self::contentTypes['completion'][0])
    {

        // verify the required parameter 'llm' is set
        if ($llm === null || (is_array($llm) && count($llm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $llm when calling completion'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling completion'
            );
        }


        $resourcePath = '/rpc/2.0/ai_custom/v1/wenxinworkshop/completions/{llm}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $queryParams['source'] = 'baiducloud-sdk';
        $queryParams['appName'] = 'php';
        $queryParams['sourceVer'] = '1.0.0';


        // path params
        if ($llm !== null) {
            $resourcePath = str_replace(
                '{' . 'llm' . '}',
                ObjectSerializer::toPathValue($llm),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $localVarAuthNames = array ( "IamAuth", "OAuth" );
        $this->updateParamsForAuth($localVarAuthNames,$queryParams, $headers, $httpBody, 'POST', new Uri($operationHost . $resourcePath));

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation embedding
     *
     * 调用支持向量计算类的大模型接口
     *
     * @param  string $llm  (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['embedding'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function embedding($llm, $body)
    {
        list($response) = $this->embeddingWithHttpInfo($llm, $body);
        return $response;
    }

    /**
     * Operation embeddingWithHttpInfo
     *
     * 调用支持向量计算类的大模型接口
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['embedding'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function embeddingWithHttpInfo($llm, $body, string $contentType = self::contentTypes['embedding'][0])
    {
        $request = $this->embeddingRequest($llm, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation embeddingAsync
     *
     * 调用支持向量计算类的大模型接口
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['embedding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function embeddingAsync($llm, $body, string $contentType = self::contentTypes['embedding'][0])
    {
        return $this->embeddingAsyncWithHttpInfo($llm, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation embeddingAsyncWithHttpInfo
     *
     * 调用支持向量计算类的大模型接口
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['embedding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function embeddingAsyncWithHttpInfo($llm, $body, string $contentType = self::contentTypes['embedding'][0])
    {
        $returnType = 'object';
        $request = $this->embeddingRequest($llm, $body, $contentType);
        $stream = false;
        if (isset($body->stream)) {
            $stream = $body->stream;
        }
        return $this->client
            ->sendAsync($request, ['stream' => $stream] + $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $sseHeader = "text/event-stream";
                    if (substr($response->getHeaderLine("content-type"), 0, strlen($sseHeader)) === $sseHeader) {
                        $body = $response->getBody();
                        // 检查流是否可读
                        if ($body->isReadable()) {
                            return [(function () use ($body) {
                                $buffer = "";
                                $msgBuffer = "";
                                // 循环直到EOF
                                while (!$body->eof()) {
                                    // 读取一行
                                    $data = $body->read(12);
                                    $buffer = $buffer . $data;
                                    $lines = explode("\n", $buffer);
                                    $buffer = array_pop($lines);
                                    foreach ($lines as $line) {
                                        if ($line == "") {
                                            yield json_decode($msgBuffer);
                                            $msgBuffer = "";
                                            continue;
                                        }
                                        $msgPart = explode(":", $line, 2);
                                        $type = $msgPart[0];
                                        $content = $msgPart[1];
                                        if ($type == 'data') {
                                            $msgBuffer = $msgBuffer.$content;
                                        }
                                    }
                                }
                            })(), $response->getStatusCode(), $response->getHeaders()];
                        }
                        return [
                            null,
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    } else {
                        if ($returnType === '\SplFileObject') {
                            $content = $response->getBody(); //stream goes to serializer
                        } else {
                            $content = (string) $response->getBody();
                            if ($returnType !== 'string') {
                                $content = json_decode($content);
                            }
                        }

                        return [
                            ObjectSerializer::deserialize($content, $returnType, []),
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    }
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'embedding'
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['embedding'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function embeddingRequest($llm, $body, string $contentType = self::contentTypes['embedding'][0])
    {

        // verify the required parameter 'llm' is set
        if ($llm === null || (is_array($llm) && count($llm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $llm when calling embedding'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling embedding'
            );
        }


        $resourcePath = '/rpc/2.0/ai_custom/v1/wenxinworkshop/embeddings/{llm}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $queryParams['source'] = 'baiducloud-sdk';
        $queryParams['appName'] = 'php';
        $queryParams['sourceVer'] = '1.0.0';


        // path params
        if ($llm !== null) {
            $resourcePath = str_replace(
                '{' . 'llm' . '}',
                ObjectSerializer::toPathValue($llm),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $localVarAuthNames = array ( "IamAuth", "OAuth" );
        $this->updateParamsForAuth($localVarAuthNames,$queryParams, $headers, $httpBody, 'POST', new Uri($operationHost . $resourcePath));

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation plugin
     *
     * 调用插件接口
     *
     * @param  string $server_path  (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plugin'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function plugin($server_path, $body)
    {
        list($response) = $this->pluginWithHttpInfo($server_path, $body);
        return $response;
    }

    /**
     * Operation pluginWithHttpInfo
     *
     * 调用插件接口
     *
     * @param  string $server_path  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plugin'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function pluginWithHttpInfo($server_path, $body, string $contentType = self::contentTypes['plugin'][0])
    {
        $request = $this->pluginRequest($server_path, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pluginAsync
     *
     * 调用插件接口
     *
     * @param  string $server_path  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plugin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pluginAsync($server_path, $body, string $contentType = self::contentTypes['plugin'][0])
    {
        return $this->pluginAsyncWithHttpInfo($server_path, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pluginAsyncWithHttpInfo
     *
     * 调用插件接口
     *
     * @param  string $server_path  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plugin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pluginAsyncWithHttpInfo($server_path, $body, string $contentType = self::contentTypes['plugin'][0])
    {
        $returnType = 'object';
        $request = $this->pluginRequest($server_path, $body, $contentType);
        $stream = false;
        if (isset($body->stream)) {
            $stream = $body->stream;
        }
        return $this->client
            ->sendAsync($request, ['stream' => $stream] + $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $sseHeader = "text/event-stream";
                    if (substr($response->getHeaderLine("content-type"), 0, strlen($sseHeader)) === $sseHeader) {
                        $body = $response->getBody();
                        // 检查流是否可读
                        if ($body->isReadable()) {
                            return [(function () use ($body) {
                                $buffer = "";
                                $msgBuffer = "";
                                // 循环直到EOF
                                while (!$body->eof()) {
                                    // 读取一行
                                    $data = $body->read(12);
                                    $buffer = $buffer . $data;
                                    $lines = explode("\n", $buffer);
                                    $buffer = array_pop($lines);
                                    foreach ($lines as $line) {
                                        if ($line == "") {
                                            yield json_decode($msgBuffer);
                                            $msgBuffer = "";
                                            continue;
                                        }
                                        $msgPart = explode(":", $line, 2);
                                        $type = $msgPart[0];
                                        $content = $msgPart[1];
                                        if ($type == 'data') {
                                            $msgBuffer = $msgBuffer.$content;
                                        }
                                    }
                                }
                            })(), $response->getStatusCode(), $response->getHeaders()];
                        }
                        return [
                            null,
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    } else {
                        if ($returnType === '\SplFileObject') {
                            $content = $response->getBody(); //stream goes to serializer
                        } else {
                            $content = (string) $response->getBody();
                            if ($returnType !== 'string') {
                                $content = json_decode($content);
                            }
                        }

                        return [
                            ObjectSerializer::deserialize($content, $returnType, []),
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    }
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'plugin'
     *
     * @param  string $server_path  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['plugin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pluginRequest($server_path, $body, string $contentType = self::contentTypes['plugin'][0])
    {

        // verify the required parameter 'server_path' is set
        if ($server_path === null || (is_array($server_path) && count($server_path) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $server_path when calling plugin'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling plugin'
            );
        }


        $resourcePath = '/rpc/2.0/ai_custom/v1/wenxinworkshop/plugin/{serverPath}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $queryParams['source'] = 'baiducloud-sdk';
        $queryParams['appName'] = 'php';
        $queryParams['sourceVer'] = '1.0.0';


        // path params
        if ($server_path !== null) {
            $resourcePath = str_replace(
                '{' . 'serverPath' . '}',
                ObjectSerializer::toPathValue($server_path),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $localVarAuthNames = array ( "IamAuth", "OAuth" );
        $this->updateParamsForAuth($localVarAuthNames,$queryParams, $headers, $httpBody, 'POST', new Uri($operationHost . $resourcePath));

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation text2image
     *
     * 调用文生图类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['text2image'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function text2image($llm, $body)
    {
        list($response) = $this->text2imageWithHttpInfo($llm, $body);
        return $response;
    }

    /**
     * Operation text2imageWithHttpInfo
     *
     * 调用文生图类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['text2image'] to see the possible values for this operation
     *
     * @throws \Baiducloud\SDK\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function text2imageWithHttpInfo($llm, $body, string $contentType = self::contentTypes['text2image'][0])
    {
        $request = $this->text2imageRequest($llm, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                 );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation text2imageAsync
     *
     * 调用文生图类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['text2image'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function text2imageAsync($llm, $body, string $contentType = self::contentTypes['text2image'][0])
    {
        return $this->text2imageAsyncWithHttpInfo($llm, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation text2imageAsyncWithHttpInfo
     *
     * 调用文生图类大模型
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['text2image'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function text2imageAsyncWithHttpInfo($llm, $body, string $contentType = self::contentTypes['text2image'][0])
    {
        $returnType = 'object';
        $request = $this->text2imageRequest($llm, $body, $contentType);
        $stream = false;
        if (isset($body->stream)) {
            $stream = $body->stream;
        }
        return $this->client
            ->sendAsync($request, ['stream' => $stream] + $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $sseHeader = "text/event-stream";
                    if (substr($response->getHeaderLine("content-type"), 0, strlen($sseHeader)) === $sseHeader) {
                        $body = $response->getBody();
                        // 检查流是否可读
                        if ($body->isReadable()) {
                            return [(function () use ($body) {
                                $buffer = "";
                                $msgBuffer = "";
                                // 循环直到EOF
                                while (!$body->eof()) {
                                    // 读取一行
                                    $data = $body->read(12);
                                    $buffer = $buffer . $data;
                                    $lines = explode("\n", $buffer);
                                    $buffer = array_pop($lines);
                                    foreach ($lines as $line) {
                                        if ($line == "") {
                                            yield json_decode($msgBuffer);
                                            $msgBuffer = "";
                                            continue;
                                        }
                                        $msgPart = explode(":", $line, 2);
                                        $type = $msgPart[0];
                                        $content = $msgPart[1];
                                        if ($type == 'data') {
                                            $msgBuffer = $msgBuffer.$content;
                                        }
                                    }
                                }
                            })(), $response->getStatusCode(), $response->getHeaders()];
                        }
                        return [
                            null,
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    } else {
                        if ($returnType === '\SplFileObject') {
                            $content = $response->getBody(); //stream goes to serializer
                        } else {
                            $content = (string) $response->getBody();
                            if ($returnType !== 'string') {
                                $content = json_decode($content);
                            }
                        }

                        return [
                            ObjectSerializer::deserialize($content, $returnType, []),
                            $response->getStatusCode(),
                            $response->getHeaders()
                        ];
                    }
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'text2image'
     *
     * @param  string $llm  (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['text2image'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function text2imageRequest($llm, $body, string $contentType = self::contentTypes['text2image'][0])
    {

        // verify the required parameter 'llm' is set
        if ($llm === null || (is_array($llm) && count($llm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $llm when calling text2image'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling text2image'
            );
        }


        $resourcePath = '/rpc/2.0/ai_custom/v1/wenxinworkshop/text2image/{llm}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $queryParams['source'] = 'baiducloud-sdk';
        $queryParams['appName'] = 'php';
        $queryParams['sourceVer'] = '1.0.0';


        // path params
        if ($llm !== null) {
            $resourcePath = str_replace(
                '{' . 'llm' . '}',
                ObjectSerializer::toPathValue($llm),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $localVarAuthNames = array ( "IamAuth", "OAuth" );
        $this->updateParamsForAuth($localVarAuthNames,$queryParams, $headers, $httpBody, 'POST', new Uri($operationHost . $resourcePath));

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
